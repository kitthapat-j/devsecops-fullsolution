name: DevSecOps CI/CD Pipeline to Azure

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_and_scan:
    name: üõ°Ô∏è Scan & Quality Gate
    permissions:
      contents: read
      packages: write
      pull-requests: write
      actions: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm install --prefix app
        
      # 1. ‡∏£‡∏±‡∏ô SonarQube Scan
      - name: SonarQube Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npm run sonar --prefix app -- \
            -Dsonar.projectKey=kitthapat-j_devsecops-fullsolution \
            -Dsonar.organization=kitthapat-j \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}

      # 2. Security Gate: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Quality Gate (‡πÉ‡∏ä‡πâ Action ‡∏™‡∏≥‡∏£‡∏≠‡∏á)
      - name: Wait for SonarQube Analysis and Check Quality Gate
        id: wait_sonar
        # ‡πÉ‡∏ä‡πâ Action ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Sonar API ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤
        uses: jbarratt/wait-on-sonar-action@v1.4.1
        with:
          url: ${{ secrets.SONAR_HOST_URL }}
          token: ${{ secrets.SONAR_TOKEN }}
          # ‡πÉ‡∏™‡πà Project Key ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
          projectKey: kitthapat-j_devsecops-fullsolution 
          timeout: 300 # ‡∏£‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏ô‡∏≤‡∏ó‡∏µ
          
      - name: Fail if SonarQube Quality Gate Fails
        # ‡∏ñ‡πâ‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Action ‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô 'OK' (‡∏ú‡πà‡∏≤‡∏ô) ‡πÉ‡∏´‡πâ Job ‡∏ô‡∏µ‡πâ Fail
        if: steps.wait_sonar.outputs.qualityGateStatus != 'OK'
        run: |
          echo "::error::SonarQube Quality Gate FAILED. Cannot proceed to testing/deployment."
          exit 1